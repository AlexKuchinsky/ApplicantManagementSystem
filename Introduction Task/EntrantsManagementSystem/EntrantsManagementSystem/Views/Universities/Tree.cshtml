
@{
    ViewBag.Title = "Tree";
}
<style>
    .Container {
        padding: 0;
        margin: 0;
    }

        .Container li {
            list-style-type: none;
        }



    /* indent for all tree children excepts root */
    .Node {
        background-image: url("../../Pictures/i.gif"); 
        background-position: top left;
        background-repeat: repeat-y;
        margin-left: 18px;
        zoom: 1;
    }

    .IsRoot {
        margin-left: 0;
    }


    /* left vertical line (grid) for all nodes */
    .IsLast {
        background-image: url("../../Pictures/i_half.gif");
        background-repeat: no-repeat;
    }

    .ExpandOpen .Expand {
        background-image: url("../../Pictures/expand_minus.gif"); 
    }

    /* closed is higher priority than open */
    .ExpandClosed .Expand {
        background-image: url("../../Pictures/expand_plus.gif");
    }

    /* highest priority */
    .ExpandLeaf .Expand {
        background-image: url("../../Pictures/expand_leaf.gif");
    }

    .Content {
        min-height: 18px;
        margin-left: 18px;
    }

    * html .Content {
        height: 18px;
    }

    .Expand {
        width: 18px;
        height: 18px;
        float: left;
    }


    .ExpandLoading {
        width: 18px;
        height: 18px;
        float: left;
        background-image: url("../../Pictures/expand_loading.gif");
    }



    .ExpandOpen .Container {
        display: block;
    }

    .ExpandClosed .Container {
        display: none;
    }

    .ExpandOpen .Expand, .ExpandClosed .Expand {
        cursor: pointer;
    }

    .ExpandLeaf .Expand {
        cursor: auto;
    }


</style>
<script>
    function tree_toggle(event) {
        event = event || window.event
        var clickedElem = event.target || event.srcElement

        if (!hasClass(clickedElem, 'Expand')) {
            return // клик не там
        }

        // Node, на который кликнули
        var node = clickedElem.parentNode
        if (hasClass(node, 'ExpandLeaf')) {
            return // клик на листе
        }

        // определить новый класс для узла
        var newClass = hasClass(node, 'ExpandOpen') ? 'ExpandClosed' : 'ExpandOpen'
        // заменить текущий класс на newClass
        // регексп находит отдельно стоящий open|close и меняет на newClass
        var re = /(^|\s)(ExpandOpen|ExpandClosed)(\s|$)/
        node.className = node.className.replace(re, '$1' + newClass + '$3')
    }


    function hasClass(elem, className) {
        return new RegExp("(^|\\s)" + className + "(\\s|$)").test(elem.className)
    }

</script>
<h2>Tree</h2>
<div onclick="tree_toggle(arguments[0])">
    <div>Root</div>
    <ul class="Container">
        <li class="Node IsRoot ExpandClosed">
            <div class="Expand"></div>
            <div class="Content">Item 1</div>
            <ul class="Container">
                <li class="Node ExpandClosed">
                    <div class="Expand"></div>
                    <div class="Content">Item 1.1</div>
                    <ul class="Container">
                        <li class="Node ExpandLeaf IsLast">
                            <div class="Expand"></div>
                            <div class="Content">Item 1.1.2</div>
                        </li>
                    </ul>
                </li>
                <li class="Node ExpandLeaf IsLast">
                    <div class="Expand"></div>
                    <div class="Content">Item 1.2</div>
                </li>
            </ul>
        </li>
        <li class="Node IsRoot ExpandClosed">
            <div class="Expand"></div>
            <div class="Content">Item 2<br />title long yeah</div>
            <ul class="Container">
                <li class="Node ExpandLeaf IsLast">
                    <div class="Expand"></div>
                    <div class="Content">Item 2.1</div>
                </li>
            </ul>
        </li>
        <li class="Node ExpandOpen IsRoot IsLast">
            <div class="Expand"></div>
            <div class="Content">Item 3</div>
            <ul class="Container">
                <li class="Node ExpandLeaf IsLast">
                    <div class="Expand"></div>
                    <div class="Content">Item 3.1</div>
                </li>
            </ul>
        </li>
    </ul>

</div>

