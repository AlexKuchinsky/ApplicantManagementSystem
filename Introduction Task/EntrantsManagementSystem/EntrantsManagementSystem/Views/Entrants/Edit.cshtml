@model EntrantsManagementSystem.Models.Entrant
@using EntrantsManagementSystem.Models
@{
    ViewBag.Title = "Edit";
}
<script>
    var initialLoad = true;
    $(function () {
        initialLoad = true;
        $.ajax({
            type: "POST",
            url: "/Entrants/GetCountries",
            data: param = "",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $(data).each(function (index, item) {
                    $("#Countries").append($('<option></option>').attr('value', JSON.stringify(item)).text(item.Title));
                });
                getCurrentLocation();
            },
            error: errorFunc
        });
    });
    function getCurrentLocation() {
        var currentCountry = $("#CurrentCountryTitle").val();
        var countriesDropdown = document.getElementById('Countries');
        var i;
        for (var j = 0; i = countriesDropdown.options[j]; j++) {
            var country = JSON.parse(i.value);
            if (country.Title == currentCountry) {
                countriesDropdown.selectedIndex = j;
                getCities(i.value);
                break;
            }
        }

    }
    function getCities(input) {
        var ID = $('#CityID').find('option').remove();
        var country = JSON.parse(input);
        var request = { 'ID': country.CountryID };
        $.ajax({
            type: "POST",
            url: "/Entrants/GetCities",
            data: JSON.stringify(request),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $(data).each(function (index, item) {
                    $("#CityID").append($('<option></option>').attr('value', item.CityID).text(item.Title));
                });
                if (initialLoad) {
                    var currentCity = $("#CurrentCityTitle").val();
                    var citiesDropdown = document.getElementById('CityID');
                    var i;

                    for (var j = 0; i = citiesDropdown.options[j]; j++) {
                        var city = i.text;
                        if (city == currentCity) {
                            citiesDropdown.selectedIndex = j;
                            break;
                        }
                    }
                    initialLoad = false; 
                }
                else {
                    $("#CityID").val("");
                }
                
            },
            error: errorFunc
        });
    }
    function errorFunc(errorData) {
        alert('Ошибка' + errorData.responseText);

    }
</script>
<h2>Edit</h2>
<input type="hidden" id="CurrentCountryTitle" value="@Model.City.Country.Title" />
<input type="hidden" id="CurrentCityTitle" value="@Model.City.Title" />
@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <div class="row">
            <div class="col-sm-6">
                <h4>General Information</h4>
                <hr />
                @Html.HiddenFor(model=>model.EntrantID)
                <p>
                    <b>Name:</b>
                    @Html.TextBoxFor(model => model.Name, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </p>
                <p>
                    <b>Surname:</b>
                    @Html.TextBoxFor(model => model.Surname, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                </p>
                <p>
                    <b>Patronumic:</b>
                    @Html.TextBoxFor(model => model.Patronumic, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Patronumic, "", new { @class = "text-danger" })
                </p>

            </div>
            <div class="col-sm-6">
                <h4>Address</h4>
                <hr />
                <p>
                    <b>Choose country:</b>
                    <select class="form-control" id="Countries" name="Countries" onmousedown="this.text = '';" onchange="getCities(this.value);"></select>
                </p>
                <p>
                    <b>Choose city:</b>
                    <select class="form-control" id="CityID" name="CityID"></select>
                </p>
                <p>
                    <b>Street:</b>
                    @Html.TextBoxFor(model => model.Street, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </p>
                <p>
                    <b>House:</b>
                    @Html.EditorFor(model => model.House, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.House, "", new { @class = "text-danger" })
                </p>
                <p>
                    <b>Entrance:</b>
                    @Html.EditorFor(model => model.Entrance, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Entrance, "", new { @class = "text-danger" })
                </p>
                <p>
                    <b>Flat:</b>
                    @Html.EditorFor(model => model.Flat, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Flat, "", new { @class = "text-danger" })
                </p>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <h4>Certificate marks</h4>
                <hr />
                <table class="table table-bordered">
                    <tr>
                        <td>
                            <b>Object</b>
                        </td>
                        <td>
                            <b>Mark</b>
                        </td>
                    </tr>
                    @for(int i=0; i<Model.CertificateMarks.Count; i++)
                    {
                        @Html.HiddenFor(model=> model.CertificateMarks[i].CertificateMarkID)
                        @Html.HiddenFor(model => model.CertificateMarks[i].EntrantID)
                        @Html.HiddenFor(model => model.CertificateMarks[i].SubjectID)
                        <tr>
                            <td>
                                @Html.DisplayFor(model=>model.CertificateMarks[i].Subject.Title)
                            </td>
                            <td>
                                @Html.EditorFor(model=> model.CertificateMarks[i].Mark, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CertificateMarks[i].Mark, "", new { @class = "text-danger" })
                            </td>

                        </tr>
                    }
                </table>
            </div>
            

        </div>

    </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
}

<div>
    @Html.ActionLink("Back to details", "Details",new { id = Model.EntrantID })
</div>
